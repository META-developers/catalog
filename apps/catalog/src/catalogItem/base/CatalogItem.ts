/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { ObjectType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { CatalogCategory } from "../../catalogCategory/base/CatalogCategory";
import {
  ValidateNested,
  IsOptional,
  IsString,
  IsDate,
  IsInt,
  IsEnum,
  IsNumber,
} from "class-validator";
import { Type } from "class-transformer";
import { Merchant } from "../../merchant/base/Merchant";
import { CatalogModifierGroup } from "../../catalogModifierGroup/base/CatalogModifierGroup";
import { EnumCatalogItemSupportedFulfillmentModes } from "./EnumCatalogItemSupportedFulfillmentModes";
import { EnumCatalogItemType } from "./EnumCatalogItemType";

@ObjectType()
class CatalogItem {
  @ApiProperty({
    required: false,
    type: () => [CatalogCategory],
  })
  @ValidateNested()
  @Type(() => CatalogCategory)
  @IsOptional()
  category?: Array<CatalogCategory>;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  categoryId!: string | null;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  createdAt!: Date;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  description!: string;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  id!: string;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  images!: string;

  @ApiProperty({
    required: true,
    type: () => Merchant,
  })
  @ValidateNested()
  @Type(() => Merchant)
  merchant?: Merchant;

  @ApiProperty({
    required: true,
    type: () => [CatalogModifierGroup],
  })
  @ValidateNested()
  @Type(() => CatalogModifierGroup)
  @IsOptional()
  modifierGroups?: Array<CatalogModifierGroup>;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  name!: string;

  @ApiProperty({
    required: true,
    type: Number,
  })
  @IsInt()
  @Field(() => Number)
  ordinal!: number;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  posIntegrationId!: string;

  @ApiProperty({
    required: true,
    type: Number,
  })
  @IsInt()
  @Field(() => Number)
  price!: number;

  @ApiProperty({
    required: true,
    enum: EnumCatalogItemSupportedFulfillmentModes,
    isArray: true,
  })
  @IsEnum(EnumCatalogItemSupportedFulfillmentModes, {
    each: true,
  })
  @IsOptional()
  @Field(() => [EnumCatalogItemSupportedFulfillmentModes], {
    nullable: true,
  })
  supportedFulfillmentModes?: Array<"PICKUP" | "DELIVERY">;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  suspendedUntil!: number | null;

  @ApiProperty({
    required: true,
    enum: EnumCatalogItemType,
  })
  @IsEnum(EnumCatalogItemType)
  @Field(() => EnumCatalogItemType, {
    nullable: true,
  })
  type?:
    | "ALCOHOL"
    | "FOOD"
    | "REGULAR"
    | "SCHEDULED_SERVICE"
    | "ON_DEMAND_SERVICE";

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  updatedAt!: Date;
}

export { CatalogItem as CatalogItem };
